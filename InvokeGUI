# Button: Clear Commands (Already Correct)
$btnClearCommands = New-Object System.Windows.Forms.Button
$btnClearCommands.Text = "Clear"
$btnClearCommands.Size = New-Object System.Drawing.Size(60,20)
$btnClearCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),190)
$btnClearCommands.Anchor = 'Top,Right'
$btnClearCommands.Add_Click({ $txtCommands.Text = "" })
$form.Controls.Add($btnClearCommands)

# Button: Import Last Command
$btnImportLastCommand = New-Object System.Windows.Forms.Button
$btnImportLastCommand.Text = "Import Last"
$btnImportLastCommand.Size = New-Object System.Drawing.Size(80,20)
$btnImportLastCommand.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 144),190)
$btnImportLastCommand.Anchor = 'Top,Right'
$btnImportLastCommand.Add_Click({
    try {
        $lastCommandPath = "$env:USERPROFILE\Desktop\RemoteICM\lastPS.ps1"
        if (Test-Path $lastCommandPath) {
            $txtCommands.Text = Get-Content -Path $lastCommandPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("Last command file (lastPS.ps1) not found.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import last command: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportLastCommand)

# Button: Load from File
$btnLoadFromFile = New-Object System.Windows.Forms.Button
$btnLoadFromFile.Text = "Load from File"
$btnLoadFromFile.Size = New-Object System.Drawing.Size(90,20)
$btnLoadFromFile.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 236),190)
$btnLoadFromFile.Anchor = 'Top,Right'
$btnLoadFromFile.Add_Click({
    try {
        $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $openFileDialog.Filter = "Common types (*.txt;*.bat;*.ps1)|*.txt;*.bat;*.ps1|All files (*.*)|*.*"
        $openFileDialog.Title = "Select a command file"
        if ($openFileDialog.ShowDialog() -eq "OK") {
            $txtCommands.Text = Get-Content -Path $openFileDialog.FileName -Raw -ErrorAction Stop
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load commands from file: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnLoadFromFile)

# Button: GetWorkstationInfo
$btnGetWorkstationInfo = New-Object System.Windows.Forms.Button
$btnGetWorkstationInfo.Text = "GetWorkstationInfo"
$btnGetWorkstationInfo.Size = New-Object System.Drawing.Size(110,20)
$btnGetWorkstationInfo.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 348),190)
$btnGetWorkstationInfo.Anchor = 'Top,Right'
$btnGetWorkstationInfo.Add_Click({
    try {
        $workstationPath = "$env:USERPROFILE\Desktop\RemoteICM\GetWorkstationInfo.ps1"
        if (Test-Path $workstationPath) {
            $txtCommands.Text = Get-Content -Path $workstationPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("GetWorkstationInfo.ps1 not found in RemoteICM directory.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load GetWorkstationInfo.ps1: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnGetWorkstationInfo)

# Button: GetMSI
$btnGetMSI = New-Object System.Windows.Forms.Button
$btnGetMSI.Text = "GetMSI"
$btnGetMSI.Size = New-Object System.Drawing.Size(60,20)
$btnGetMSI.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 410),190)
$btnGetMSI.Anchor = 'Top,Right'
$btnGetMSI.Add_Click({
    try {
        $msiPath = "$env:USERPROFILE\Desktop\RemoteICM\GetMSI.ps1"
        if (Test-Path $msiPath) {
            $txtCommands.Text = Get-Content -Path $msiPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("GetMSI.ps1 not found in RemoteICM directory.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load GetMSI.ps1: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnGetMSI)
