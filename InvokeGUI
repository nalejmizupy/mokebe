Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

# Define P/Invoke methods to hide console window
Add-Type @"
    using System;
    using System.Runtime.InteropServices;

    public class ConsoleHelper {
        [DllImport("kernel32.dll")]
        public static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        public const int SW_HIDE = 0;
    }
"@

# Function to hide PowerShell console window
function Hide-Console {
    $consoleWindow = [ConsoleHelper]::GetConsoleWindow()
    if ($consoleWindow -ne [IntPtr]::Zero) {
        [ConsoleHelper]::ShowWindow($consoleWindow, [ConsoleHelper]::SW_HIDE) | Out-Null
    }
}

# Hide console window at script start
Hide-Console

# Create main form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Remote Command Executor"
$form.Size = New-Object System.Drawing.Size(600,500)
$form.StartPosition = "CenterScreen"
$form.MinimumSize = New-Object System.Drawing.Size(400,400)

# Computer names controls
$lblComputers = New-Object System.Windows.Forms.Label
$lblComputers.Text = "Computer Names (separate by ; or new line):"
$lblComputers.Location = New-Object System.Drawing.Point(10,10)
$lblComputers.AutoSize = $true
$form.Controls.Add($lblComputers)

$btnClearComputers = New-Object System.Windows.Forms.Button
$btnClearComputers.Text = "Clear"
$btnClearComputers.Size = New-Object System.Drawing.Size(60,20)
$btnClearComputers.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),10)
$btnClearComputers.Anchor = 'Top,Right'
$btnClearComputers.Add_Click({ $txtComputers.Text = "" })
$form.Controls.Add($btnClearComputers)

$btnImportLastList = New-Object System.Windows.Forms.Button
$btnImportLastList.Text = "Import Last"
$btnImportLastList.Size = New-Object System.Drawing.Size(80,20)
$btnImportLastList.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 144),10)
$btnImportLastList.Anchor = 'Top,Right'
$btnImportLastList.Add_Click({
    try {
        $lastListPath = "$env:USERPROFILE\Desktop\RemoteICM\lastLIST.txt"
        if (Test-Path $lastListPath) {
            $txtComputers.Text = Get-Content -Path $lastListPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("Last computer list not found.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import last computer list: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportLastList)

$btnImportAD = New-Object System.Windows.Forms.Button
$btnImportAD.Text = "Import AD"
$btnImportAD.Size = New-Object System.Drawing.Size(80,20)
$btnImportAD.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 226),10)
$btnImportAD.Anchor = 'Top,Right'
$btnImportAD.Add_Click({
    try {
        if (-not (Get-Module -ListAvailable -Name ActiveDirectory)) {
            throw "ActiveDirectory module not found. Please ensure it's installed."
        }
        Import-Module ActiveDirectory -ErrorAction Stop
        $computers = Get-ADComputer -Filter {Enabled -eq $true -and OperatingSystem -like "*Windows 11*"} -Properties Name | 
            Select-Object -ExpandProperty Name | Sort-Object
        if ($computers.Count -eq 0) {
            [System.Windows.Forms.MessageBox]::Show("No enabled Windows 11 computers found in AD.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        } else {
            $txtComputers.Text = $computers -join "`r`n"
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import AD computers: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportAD)

$txtComputers = New-Object System.Windows.Forms.TextBox
$txtComputers.Multiline = $true
$txtComputers.Location = New-Object System.Drawing.Point(10,30)
$txtComputers.Size = New-Object System.Drawing.Size(560,150)
$txtComputers.MinimumSize = New-Object System.Drawing.Size(200,50)
$txtComputers.Anchor = 'Top,Left,Right'
$txtComputers.ScrollBars = 'Vertical'
$form.Controls.Add($txtComputers)

# Commands controls
$lblCommands = New-Object System.Windows.Forms.Label
$lblCommands.Text = "Commands to Execute:"
$lblCommands.Location = New-Object System.Drawing.Point(10,190)
$lblCommands.AutoSize = $true
$form.Controls.Add($lblCommands)

$btnClearCommands = New-Object System.Windows.Forms.Button
$btnClearCommands.Text = "Clear"
$btnClearCommands.Size = New-Object System.Drawing.Size(60,20)
$btnClearCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),190)
$btnClearCommands.Anchor = 'Top,Right'
$btnClearCommands.Add_Click({ $txtCommands.Text = "" })
$form.Controls.Add($btnClearCommands)

$btnLoadCommands = New-Object System.Windows.Forms.Button
$btnLoadCommands.Text = "Load from File"
$btnLoadCommands.Size = New-Object System.Drawing.Size(90,20)
$btnLoadCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 154),190)
$btnLoadCommands.Anchor = 'Top,Right'
$btnLoadCommands.Add_Click({
    try {
        $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $openFileDialog.Filter = "Common types (*.txt;*.bat;*.ps1)|*.txt;*.bat;*.ps1|All files (*.*)|*.*"
        $openFileDialog.Title = "Select a command file"
        if ($openFileDialog.ShowDialog() -eq "OK") {
            $txtCommands.Text = Get-Content -Path $openFileDialog.FileName -Raw -ErrorAction Stop
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load commands from file: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnLoadCommands)

$btnGetWorkstationInfo = New-Object System.Windows.Forms.Button
$btnGetWorkstationInfo.Text = "GetWorkstationInfo"
$btnGetWorkstationInfo.Size = New-Object System.Drawing.Size(110,20)
$btnGetWorkstationInfo.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 266),190)
$btnGetWorkstationInfo.Anchor = 'Top,Right'
$btnGetWorkstationInfo.Add_Click({
    try {
        $infoPath = "$env:USERPROFILE\Desktop\RemoteICM\GetWorkstationInfo.ps1"
        if (Test-Path $infoPath) {
            $txtCommands.Text = Get-Content -Path $infoPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("GetWorkstationInfo.ps1 not found in $env:USERPROFILE\Desktop\RemoteICM.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import GetWorkstationInfo.ps1: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnGetWorkstationInfo)

$btnImportLastPS = New-Object System.Windows.Forms.Button
$btnImportLastPS.Text = "Import Last"
$btnImportLastPS.Size = New-Object System.Drawing.Size(80,20)
$btnImportLastPS.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 348),190)
$btnImportLastPS.Anchor = 'Top,Right'
$btnImportLastPS.Add_Click({
    try {
        $lastPSPath = "$env:USERPROFILE\Desktop\RemoteICM\lastPS.ps1"
        if (Test-Path $lastPSPath) {
            $txtCommands.Text = Get-Content -Path $lastPSPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("Last command file not found.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import last commands: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportLastPS)

$txtCommands = New-Object System.Windows.Forms.TextBox
$txtCommands.Multiline = $true
$txtCommands.Location = New-Object System.Drawing.Point(10,210)
$txtCommands.Size = New-Object System.Drawing.Size(560,100)
$txtCommands.MinimumSize = New-Object System.Drawing.Size(200,50)
$txtCommands.Anchor = 'Top,Left,Right'
$txtCommands.ScrollBars = 'Vertical'
$form.Controls.Add($txtCommands)

# Concurrent runs control
$lblConcurrent = New-Object System.Windows.Forms.Label
$lblConcurrent.Text = "Max Concurrent Runs:"
$lblConcurrent.Location = New-Object System.Drawing.Point(10,320)
$lblConcurrent.AutoSize = $true
$lblConcurrent.Anchor = 'Bottom,Left'
$form.Controls.Add($lblConcurrent)

$numConcurrent = New-Object System.Windows.Forms.NumericUpDown
$numConcurrent.Minimum = 1
$numConcurrent.Maximum = 100
$numConcurrent.Value = 20
$numConcurrent.Width = 50
$numConcurrent.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 60),318)
$numConcurrent.Anchor = 'Bottom,Right'
$form.Controls.Add($numConcurrent)

# Progress bar
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(10,350)
$progressBar.Size = New-Object System.Drawing.Size(560,20)
$progressBar.Anchor = 'Bottom,Left,Right'
$form.Controls.Add($progressBar)

# Save to CSV checkbox
$chkSaveCsv = New-Object System.Windows.Forms.CheckBox
$chkSaveCsv.Text = "Save Results to CSV File"
$chkSaveCsv.Location = New-Object System.Drawing.Point(10,380)
$chkSaveCsv.Size = New-Object System.Drawing.Size(150,20)
$chkSaveCsv.Anchor = 'Bottom,Left'
$form.Controls.Add($chkSaveCsv)

# Run and Cancel buttons
$btnRun = New-Object System.Windows.Forms.Button
$btnRun.Text = "Execute"
$btnRun.Location = New-Object System.Drawing.Point(10,410)
$btnRun.Size = New-Object System.Drawing.Size(100,20)
$btnRun.Anchor = 'Bottom,Left'
$form.Controls.Add($btnRun)

$btnCancel = New-Object System.Windows.Forms.Button
$btnCancel.Text = "Cancel"
$btnCancel.Location = New-Object System.Drawing.Point(120,410)
$btnCancel.Size = New-Object System.Drawing.Size(100,20)
$btnCancel.Anchor = 'Bottom,Left'
$btnCancel.Enabled = $false
$form.Controls.Add($btnCancel)

# Status label
$lblStatus = New-Object System.Windows.Forms.Label
$lblStatus.Location = New-Object System.Drawing.Point(230,415)
$lblStatus.Size = New-Object System.Drawing.Size(400,20)
$lblStatus.Anchor = 'Bottom,Left'
$form.Controls.Add($lblStatus)

# Output form
$script:OutputForm = New-Object System.Windows.Forms.Form
$script:OutputForm.Text = "Command Output"
$script:OutputForm.Size = New-Object System.Drawing.Size(800,400)
$script:OutputForm.StartPosition = "CenterScreen"
$script:OutputForm.MinimumSize = New-Object System.Drawing.Size(600,300)
$script:OutputForm.FormBorderStyle = 'Sizable'
$script:OutputForm.AutoScroll = $true
$script:OutputForm.Add_FormClosing({ $_.Cancel = $true; $script:OutputForm.Hide() })
$script:OutputForm.Add_Shown({ $script:OutputForm.Refresh() })

$script:OutputGrid = New-Object System.Windows.Forms.DataGridView
$script:OutputGrid.Location = New-Object System.Drawing.Point(10,10)
$script:OutputGrid.Size = New-Object System.Drawing.Size(780,380)
$script:OutputGrid.Anchor = 'Top,Left,Bottom,Right'
$script:OutputGrid.ReadOnly = $true
$script:OutputGrid.AllowUserToAddRows = $false
$script:OutputGrid.ColumnHeadersHeightSizeMode = 'AutoSize'
$script:OutputGrid.AutoSizeColumnsMode = [System.Windows.Forms.DataGridViewAutoSizeColumnsMode]::AllCells
$script:OutputGrid.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
$script:OutputGrid.Columns.Add("Computer", "Computer") | Out-Null
$script:OutputGrid.Columns.Add("Status", "Status") | Out-Null
$script:OutputGrid.Columns.Add("Timestamp", "Timestamp") | Out-Null
$script:OutputGrid.Columns.Add("Output", "Output") | Out-Null
$script:OutputForm.Controls.Add($script:OutputGrid)

# Form resize event
$form.Add_Resize({
    $txtComputers.Width = $form.ClientSize.Width - 20
    $txtCommands.Width = $form.ClientSize.Width - 20
    $progressBar.Width = $form.ClientSize.Width - 20
    $lblStatus.Width = $form.ClientSize.Width - 190

    $btnClearComputers.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),10)
    $btnImportLastList.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 144),10)
    $btnImportAD.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 226),10)
    $btnClearCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62), ($txtComputers.Bottom + 10))
    $btnLoadCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 154), ($txtComputers.Bottom + 10))
    $btnGetWorkstationInfo.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 266), ($txtComputers.Bottom + 10))
    $btnImportLastPS.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 348), ($txtComputers.Bottom + 10))
    $numConcurrent.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 60), ($txtCommands.Bottom + 8))

    $bottomControlsHeight = 90
    $availableHeight = $form.ClientSize.Height - $bottomControlsHeight - 60
    
    if ($availableHeight -gt 150) {
        $txtComputers.Height = [Math]::Min($availableHeight * 0.6, 300)
        $lblCommands.Location = New-Object System.Drawing.Point(10, ($txtComputers.Bottom + 10))
        $txtCommands.Location = New-Object System.Drawing.Point(10, ($lblCommands.Bottom + 10))
        $txtCommands.Height = $availableHeight - $txtComputers.Height - 40
        
        $lblConcurrent.Location = New-Object System.Drawing.Point(10, ($form.ClientSize.Height - 90))
        $numConcurrent.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 60), ($form.ClientSize.Height - 92))
        $progressBar.Location = New-Object System.Drawing.Point(10, ($form.ClientSize.Height - 70))
        $chkSaveCsv.Location = New-Object System.Drawing.Point(10, ($form.ClientSize.Height - 50))
        $btnRun.Location = New-Object System.Drawing.Point(10, ($form.ClientSize.Height - 30))
        $btnCancel.Location = New-Object System.Drawing.Point(120, ($form.ClientSize.Height - 30))
        $lblStatus.Location = New-Object System.Drawing.Point(230, ($form.ClientSize.Height - 115))
    }
})

$script:OutputForm.Add_Resize({
    $script:OutputGrid.Width = $script:OutputForm.ClientSize.Width - 20
    $script:OutputGrid.Height = $script:OutputForm.ClientSize.Height - 20
    $script:OutputForm.Refresh()
})

# Global variables
$script:Jobs = New-Object 'System.Collections.Concurrent.ConcurrentBag[PSObject]'
$script:Results = New-Object 'System.Collections.Generic.List[PSObject]'
$script:RunspacePool = $null
$script:UpdateTimer = New-Object System.Windows.Forms.Timer
$script:IsCancelled = $false

# Timer setup
$script:UpdateTimer.Interval = 2000
$script:UpdateTimer.Add_Tick({
    try {
        if ($script:Jobs.Count -gt 0 -and -not $script:IsCancelled) {
            $completedJobs = [System.Collections.Concurrent.ConcurrentBag[PSObject]]::new()
            $script:Jobs | Where-Object { $_.Handle.IsCompleted } | ForEach-Object { $completedJobs.Add($_) }
            if ($completedJobs.Count -gt 0) {
                foreach ($job in $completedJobs) {
                    $null = $script:Jobs.TryTake([ref]$job)
                    $job.PowerShell.EndInvoke($job.Handle)
                    $job.PowerShell.Dispose()
                    $progressBar.Value++
                }

                $currentCount = $script:OutputGrid.Rows.Count
                $newResults = $script:Results | Select-Object -Skip $currentCount
                foreach ($result in $newResults) {
                    $script:OutputGrid.Rows.Add($result.ComputerName, $result.Status, $result.Timestamp, $result.Output) | Out-Null
                }
                if ($newResults) { 
                    $script:OutputGrid.FirstDisplayedScrollingRowIndex = $script:OutputGrid.RowCount - 1
                    $script:OutputForm.Refresh()
                }
            }
        }

        if (($script:Jobs.Count -eq 0 -or $script:IsCancelled) -and $script:UpdateTimer.Enabled) {
            $script:UpdateTimer.Stop()
            if ($script:RunspacePool -and $script:RunspacePool.RunspacePoolStateInfo.State -eq 'Opened') {
                $script:RunspacePool.Close()
                $script:RunspacePool.Dispose()
                $script:RunspacePool = $null
            }

            if ($chkSaveCsv.Checked -and $script:Results.Count -gt 0 -and -not $script:IsCancelled) {
                try {
                    $remoteICMDir = "$env:USERPROFILE\Desktop\RemoteICM"
                    if (-not (Test-Path $remoteICMDir)) { New-Item -Path $remoteICMDir -ItemType Directory -Force | Out-Null }
                    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
                    $csvPath = "$remoteICMDir\RemoteCommandResults_$timestamp.csv"
                    $script:Results | Export-Csv -Path $csvPath -NoTypeInformation -ErrorAction Stop
                    $lblStatus.Text = "Completed - Results saved to: $csvPath"
                }
                catch {
                    $lblStatus.Text = "Failed to save CSV: $_"
                    Add-Content -Path "$env:USERPROFILE\Desktop\RemoteICM\RemoteCommandErrors.log" -Value "$(Get-Date): Failed to save CSV: $_"
                }
            }
            elseif ($script:IsCancelled) {
                $lblStatus.Text = "Execution cancelled"
            }
            else {
                $lblStatus.Text = "Completed"
            }
            $btnRun.Enabled = $true
            $btnCancel.Enabled = $false
            $script:IsCancelled = $false
        }
    }
    catch {
        $lblStatus.Text = "Error during execution: $_"
        Add-Content -Path "$env:USERPROFILE\Desktop\RemoteICM\RemoteCommandErrors.log" -Value "$(Get-Date): Error during execution: $_"
        $script:UpdateTimer.Stop()
        if ($script:RunspacePool) { 
            $script:RunspacePool.Close()
            $script:RunspacePool.Dispose()
            $script:RunspacePool = $null
        }
        $btnRun.Enabled = $true
        $btnCancel.Enabled = $false
    }
    finally {
        [System.Windows.Forms.Application]::DoEvents()
    }
})

# Reset function
function Reset-ScriptState {
    if ($script:UpdateTimer.Enabled) { $script:UpdateTimer.Stop() }
    if ($script:RunspacePool -and $script:RunspacePool.RunspacePoolStateInfo.State -eq 'Opened') {
        $script:RunspacePool.Close()
        $script:RunspacePool.Dispose()
        $script:RunspacePool = $null
    }
    $script:Jobs = New-Object 'System.Collections.Concurrent.ConcurrentBag[PSObject]'
    $script:Results.Clear()
    $script:IsCancelled = $false
    $progressBar.Value = 0
    $lblStatus.Text = ""
    $btnRun.Enabled = $true
    $btnCancel.Enabled = $false
    $script:OutputGrid.Rows.Clear()
    $script:OutputForm.Refresh()
}

# Button click events
$btnRun.Add_Click({
    Reset-ScriptState

    $computers = $txtComputers.Text -split '[;\r\n]' | Where-Object { $_ -ne "" }
    $commands = $txtCommands.Text -split '[\r\n]' | Where-Object { $_ -ne "" }
    
    if ($computers.Count -eq 0 -or $commands.Count -eq 0) {
        [System.Windows.Forms.MessageBox]::Show("Please enter computer names and commands.", "Input Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }

    $invalidComputers = $computers | Where-Object { $_ -match '[^\w\.-]' }
    if ($invalidComputers) {
        [System.Windows.Forms.MessageBox]::Show("Invalid computer names detected: $($invalidComputers -join ', ')", "Validation Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        return
    }

    # Save last computer list and commands
    try {
        $remoteICMDir = "$env:USERPROFILE\Desktop\RemoteICM"
        if (-not (Test-Path $remoteICMDir)) { New-Item -Path $remoteICMDir -ItemType Directory -Force | Out-Null }
        $txtComputers.Text | Out-File -FilePath "$remoteICMDir\lastLIST.txt" -Encoding UTF8 -ErrorAction Stop
        $txtCommands.Text | Out-File -FilePath "$remoteICMDir\lastPS.ps1" -Encoding UTF8 -ErrorAction Stop
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to save last list/commands: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }

    $progressBar.Maximum = $computers.Count
    $btnRun.Enabled = $false
    $btnCancel.Enabled = $true
    $script:OutputForm.Show()
    $script:OutputForm.Refresh()

    if (-not $script:RunspacePool -or $script:RunspacePool.IsDisposed) {
        $script:RunspacePool = [RunspaceFactory]::CreateRunspacePool(1, $numConcurrent.Value)
        $script:RunspacePool.Open()
    }
    $script:Jobs = New-Object 'System.Collections.Concurrent.ConcurrentBag[PSObject]'
    $script:Results = New-Object 'System.Collections.Generic.List[PSObject]'

    foreach ($computer in $computers) {
        $computer = $computer.Trim()
        $powershell = [PowerShell]::Create().AddScript({
            param($comp, $cmds, $resultsList)
            try {
                $output = Invoke-Command -ComputerName $comp -ScriptBlock {
                    param($commands)
                    $cmdResults = @()
                    foreach ($cmd in $commands) {
                        $result = Invoke-Expression $cmd -ErrorAction Stop
                        $cmdResults += [PSCustomObject]@{
                            Output = if ($result) { $result | Out-String } else { "" }
                        }
                    }
                    return $cmdResults
                } -ArgumentList (,$cmds) -ErrorAction Stop -SessionOption (New-PSSessionOption -OperationTimeout 30000)
                foreach ($result in $output) {
                    $resultsList.Add([PSCustomObject]@{
                        ComputerName = $comp
                        Output = $result.Output
                        Status = "Success"
                        Timestamp = Get-Date
                    })
                }
            }
            catch {
                $resultsList.Add([PSCustomObject]@{
                    ComputerName = $comp
                    Output = $_.Exception.Message
                    Status = if ($_.Exception -match "not online") { "Offline" } elseif ($_.Exception -match "timeout") { "Timeout" } else { "Error" }
                    Timestamp = Get-Date
                })
            }
        }).AddParameter("comp", $computer).AddParameter("cmds", $commands).AddParameter("resultsList", $script:Results)
        
        $powershell.RunspacePool = $script:RunspacePool
        $script:Jobs.Add([PSCustomObject]@{
            PowerShell = $powershell
            Handle = $powershell.BeginInvoke()
        })
    }

    $script:UpdateTimer.Start()
})

$btnCancel.Add_Click({
    $script:IsCancelled = $true
    $lblStatus.Text = "Cancelling execution..."
})

# Clean up on form close
$form.Add_FormClosing({
    if ($script:UpdateTimer.Enabled) { $script:UpdateTimer.Stop() }
    if ($script:RunspacePool -and $script:RunspacePool.RunspacePoolStateInfo.State -eq 'Opened') {
        $script:RunspacePool.Close()
        $script:RunspacePool.Dispose()
    }
    $script:UpdateTimer.Dispose()
    $script:OutputForm.Close()
})

# Show the form
$form.ShowDialog()
