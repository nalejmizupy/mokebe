Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

Add-Type @"
    using System;
    using System.Runtime.InteropServices;
    public class ConsoleHelper {
        [DllImport("kernel32.dll")] public static extern IntPtr GetConsoleWindow();
        [DllImport("user32.dll")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        public const int SW_HIDE = 0;
    }
"@

function Hide-Console {
    $consoleWindow = [ConsoleHelper]::GetConsoleWindow()
    if ($consoleWindow -ne [IntPtr]::Zero) {
        [ConsoleHelper]::ShowWindow($consoleWindow, [ConsoleHelper]::SW_HIDE) | Out-Null
    }
}

#Hide-Console

$form = New-Object System.Windows.Forms.Form
$form.Text = "Remote Command Executor"
$form.Size = New-Object System.Drawing.Size(600,500)
$form.StartPosition = "CenterScreen"
$form.MinimumSize = New-Object System.Drawing.Size(400,400)

$lblComputers = New-Object System.Windows.Forms.Label
$lblComputers.Text = "Computer Names (separate by ; or new line):"
$lblComputers.Location = New-Object System.Drawing.Point(10,10)
$lblComputers.AutoSize = $true
$form.Controls.Add($lblComputers)

$btnClearComputers = New-Object System.Windows.Forms.Button
$btnClearComputers.Text = "Clear"
$btnClearComputers.Size = New-Object System.Drawing.Size(60,20)
$btnClearComputers.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),10)
$btnClearComputers.Anchor = 'Top,Right'
$btnClearComputers.Add_Click({ $txtComputers.Text = "" })
$form.Controls.Add($btnClearComputers)

$btnImportLastList = New-Object System.Windows.Forms.Button
$btnImportLastList.Text = "Import Last"
$btnImportLastList.Size = New-Object System.Drawing.Size(80,20)
$btnImportLastList.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 144),10)
$btnImportLastList.Anchor = 'Top,Right'
$btnImportLastList.Add_Click({
    try {
        $lastListPath = "$env:USERPROFILE\Desktop\RemoteICM\lastLIST.txt"
        if (Test-Path $lastListPath) {
            $txtComputers.Text = Get-Content -Path $lastListPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("Last computer list not found.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import last computer list: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportLastList)

$btnImportAD = New-Object System.Windows.Forms.Button
$btnImportAD.Text = "Import AD"
$btnImportAD.Size = New-Object System.Drawing.Size(80,20)
$btnImportAD.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 226),10)
$btnImportAD.Anchor = 'Top,Right'
$btnImportAD.Add_Click({
    try {
        if (-not (Get-Module -ListAvailable -Name ActiveDirectory)) {
            throw "ActiveDirectory module not found. Please ensure it's installed."
        }
        Import-Module ActiveDirectory -ErrorAction Stop
        $computers = Get-ADComputer -Filter {Enabled -eq $true -and OperatingSystem -like "*Windows 11*"} -Properties Name | 
            Select-Object -ExpandProperty Name | Sort-Object
        if ($computers.Count -eq 0) {
            [System.Windows.Forms.MessageBox]::Show("No enabled Windows 11 computers found in AD.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        } else {
            $txtComputers.Text = $computers -join "`r`n"
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import AD computers: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportAD)

$txtComputers = New-Object System.Windows.Forms.TextBox
$txtComputers.Multiline = $true
$txtComputers.Location = New-Object System.Drawing.Point(10,30)
$txtComputers.Size = New-Object System.Drawing.Size(560,150)
$txtComputers.Anchor = 'Top,Left,Right'
$txtComputers.ScrollBars = 'Vertical'
$form.Controls.Add($txtComputers)

$lblCommands = New-Object System.Windows.Forms.Label
$lblCommands.Text = "Commands to Execute:"
$lblCommands.Location = New-Object System.Drawing.Point(10,190)
$lblCommands.AutoSize = $true
$form.Controls.Add($lblCommands)

$btnGetMSI = New-Object System.Windows.Forms.Button
$btnGetMSI.Text = "GetMSI"
$btnGetMSI.Size = New-Object System.Drawing.Size(60,20)
$btnGetMSI.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 410),190)
$btnGetMSI.Anchor = 'Top,Right'
$btnGetMSI.Add_Click({
    try {
        $msiPath = "$env:USERPROFILE\Desktop\RemoteICM\GetMSI.ps1"
        if (Test-Path $msiPath) {
            $txtCommands.Text = Get-Content -Path $msiPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("GetMSI.ps1 not found in RemoteICM directory.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load GetMSI.ps1: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnGetMSI)

$btnGetWorkstationInfo = New-Object System.Windows.Forms.Button
$btnGetWorkstationInfo.Text = "GetWorkstationInfo"
$btnGetWorkstationInfo.Size = New-Object System.Drawing.Size(110,20)
$btnGetWorkstationInfo.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 348),190)
$btnGetWorkstationInfo.Anchor = 'Top,Right'
$btnGetWorkstationInfo.Add_Click({
    try {
        $workstationPath = "$env:USERPROFILE\Desktop\RemoteICM\GetWorkstationInfo.ps1"
        if (Test-Path $workstationPath) {
            $txtCommands.Text = Get-Content -Path $workstationPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("GetWorkstationInfo.ps1 not found in RemoteICM directory.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load GetWorkstationInfo.ps1: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnGetWorkstationInfo)

$btnLoadFromFile = New-Object System.Windows.Forms.Button
$btnLoadFromFile.Text = "Load from File"
$btnLoadFromFile.Size = New-Object System.Drawing.Size(90,20)
$btnLoadFromFile.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 236),190)
$btnLoadFromFile.Anchor = 'Top,Right'
$btnLoadFromFile.Add_Click({
    try {
        $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $openFileDialog.Filter = "Common types (*.txt;*.bat;*.ps1)|*.txt;*.bat;*.ps1|All files (*.*)|*.*"
        $openFileDialog.Title = "Select a command file"
        if ($openFileDialog.ShowDialog() -eq "OK") {
            $txtCommands.Text = Get-Content -Path $openFileDialog.FileName -Raw -ErrorAction Stop
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to load commands from file: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnLoadFromFile)

$btnImportLastCommand = New-Object System.Windows.Forms.Button
$btnImportLastCommand.Text = "Import Last"
$btnImportLastCommand.Size = New-Object System.Drawing.Size(80,20)
$btnImportLastCommand.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 144),190)
$btnImportLastCommand.Anchor = 'Top,Right'
$btnImportLastCommand.Add_Click({
    try {
        $lastCommandPath = "$env:USERPROFILE\Desktop\RemoteICM\lastPS.ps1"
        if (Test-Path $lastCommandPath) {
            $txtCommands.Text = Get-Content -Path $lastCommandPath -Raw -ErrorAction Stop
        } else {
            [System.Windows.Forms.MessageBox]::Show("Last command file (lastPS.ps1) not found.", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        }
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to import last command: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})
$form.Controls.Add($btnImportLastCommand)

$btnClearCommands = New-Object System.Windows.Forms.Button
$btnClearCommands.Text = "Clear"
$btnClearCommands.Size = New-Object System.Drawing.Size(60,20)
$btnClearCommands.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 62),190)
$btnClearCommands.Anchor = 'Top,Right'
$btnClearCommands.Add_Click({ $txtCommands.Text = "" })
$form.Controls.Add($btnClearCommands)

$txtCommands = New-Object System.Windows.Forms.TextBox
$txtCommands.Multiline = $true
$txtCommands.Location = New-Object System.Drawing.Point(10,210)
$txtCommands.Size = New-Object System.Drawing.Size(560,100)
$txtCommands.Anchor = 'Top,Left,Right'
$txtCommands.ScrollBars = 'Vertical'
$form.Controls.Add($txtCommands)

$lblThrottle = New-Object System.Windows.Forms.Label
$lblThrottle.Text = "Throttle Limit:"
$lblThrottle.Location = New-Object System.Drawing.Point(10,320)
$lblThrottle.AutoSize = $true
$lblThrottle.Anchor = 'Bottom,Left'
$form.Controls.Add($lblThrottle)

$numThrottle = New-Object System.Windows.Forms.NumericUpDown
$numThrottle.Minimum = 1
$numThrottle.Maximum = 100
$numThrottle.Value = 20
$numThrottle.Width = 50
$numThrottle.Location = New-Object System.Drawing.Point(($form.ClientSize.Width - 60),318)
$numThrottle.Anchor = 'Bottom,Right'
$form.Controls.Add($numThrottle)

$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(10,350)
$progressBar.Size = New-Object System.Drawing.Size(560,20)
$progressBar.Anchor = 'Bottom,Left,Right'
$form.Controls.Add($progressBar)

$chkSaveCsv = New-Object System.Windows.Forms.CheckBox
$chkSaveCsv.Text = "Save Results to CSV File"
$chkSaveCsv.Location = New-Object System.Drawing.Point(10,380)
$chkSaveCsv.Size = New-Object System.Drawing.Size(150,20)
$chkSaveCsv.Anchor = 'Bottom,Left'
$form.Controls.Add($chkSaveCsv)

$btnRun = New-Object System.Windows.Forms.Button
$btnRun.Text = "Execute"
$btnRun.Location = New-Object System.Drawing.Point(10,410)
$btnRun.Size = New-Object System.Drawing.Size(100,20)
$btnRun.Anchor = 'Bottom,Left'
$form.Controls.Add($btnRun)

$btnCancel = New-Object System.Windows.Forms.Button
$btnCancel.Text = "Cancel"
$btnCancel.Location = New-Object System.Drawing.Point(120,410)
$btnCancel.Size = New-Object System.Drawing.Size(100,20)
$btnCancel.Anchor = 'Bottom,Left'
$btnCancel.Enabled = $false
$form.Controls.Add($btnCancel)

$lblStatus = New-Object System.Windows.Forms.Label
$lblStatus.Location = New-Object System.Drawing.Point(230,415)
$lblStatus.Size = New-Object System.Drawing.Size(400,20)
$lblStatus.Anchor = 'Bottom,Left'
$form.Controls.Add($lblStatus)

$script:LogPath = "$env:USERPROFILE\Desktop\RemoteICM\DebugLog.txt"
$script:CsvPath = $null
$script:IsCancelled = $false
$script:Job = $null
$script:ResultsWindow = $null
$script:DataGridView = $null
$script:ResultsList = [System.Collections.ArrayList]::new()
$script:Timer = $null

function Show-ResultsWindow {
    if (-not $script:ResultsWindow -or $script:ResultsWindow.IsDisposed) {
        $script:ResultsWindow = New-Object System.Windows.Forms.Form
        $script:ResultsWindow.Text = "Command Execution Results"
        $script:ResultsWindow.Size = New-Object System.Drawing.Size(800,600)
        $script:ResultsWindow.StartPosition = "CenterScreen"
        
        $script:DataGridView = New-Object System.Windows.Forms.DataGridView
        $script:DataGridView.Dock = "Fill"
        $script:DataGridView.AutoSizeColumnsMode = "None"
        $script:DataGridView.ReadOnly = $true
        $script:DataGridView.ScrollBars = "Both"
        $script:DataGridView.ColumnHeadersHeightSizeMode = "AutoSize"
        $script:DataGridView.AllowUserToResizeColumns = $true
        $script:DataGridView.AllowUserToResizeRows = $true
        
        $colComputerName = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $colComputerName.Name = "ComputerName"
        $colComputerName.HeaderText = "Computer Name"
        $colComputerName.Width = 150
        $script:DataGridView.Columns.Add($colComputerName) | Out-Null
        
        $colStatus = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $colStatus.Name = "Status"
        $colStatus.HeaderText = "Status"
        $colStatus.Width = 100
        $script:DataGridView.Columns.Add($colStatus) | Out-Null
        
        $colTimestamp = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $colTimestamp.Name = "Timestamp"
        $colTimestamp.HeaderText = "Timestamp"
        $colTimestamp.Width = 150
        $script:DataGridView.Columns.Add($colTimestamp) | Out-Null
        
        $colOutput = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $colOutput.Name = "Output"
        $colOutput.HeaderText = "Output"
        $colOutput.Width = 400
        $colOutput.DefaultCellStyle.WrapMode = [System.Windows.Forms.DataGridViewTriState]::True
        $script:DataGridView.Columns.Add($colOutput) | Out-Null
        
        $script:DataGridView.AutoSizeRowsMode = "AllCells"
        
        $script:ResultsWindow.Controls.Add($script:DataGridView)
        $script:ResultsWindow.Show()
    }
}

function Update-DataGridView {
    param($results)
    if ($script:DataGridView) {
        $script:DataGridView.Rows.Clear()
        foreach ($result in $results) {
            $script:DataGridView.Rows.Add($result.ComputerName, $result.Status, $result.Timestamp, $result.Output) | Out-Null
        }
        $script:DataGridView.Refresh()
    }
}

$btnRun.Add_Click({
    $script:IsCancelled = $false
    $lblStatus.Text = "Starting execution..."
    $btnRun.Enabled = $false
    $btnCancel.Enabled = $true
    $progressBar.Value = 0
    $form.Refresh()

    $computers = $txtComputers.Text -split '[;\r\n]' | Where-Object { $_ -ne "" }
    $commandText = $txtCommands.Text.Trim()
    $script:ResultsList.Clear()
    
    if ($computers.Count -eq 0 -or [string]::IsNullOrWhiteSpace($commandText)) {
        [System.Windows.Forms.MessageBox]::Show("Please enter computer names and commands.", "Input Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        $btnRun.Enabled = $true
        $btnCancel.Enabled = $false
        $lblStatus.Text = ""
        return
    }

    try {
        $remoteICMDir = "$env:USERPROFILE\Desktop\RemoteICM"
        if (-not (Test-Path $remoteICMDir)) { New-Item -Path $remoteICMDir -ItemType Directory -Force | Out-Null }
        $txtComputers.Text | Out-File -FilePath "$remoteICMDir\lastLIST.txt" -Encoding UTF8 -ErrorAction Stop
        $txtCommands.Text | Out-File -FilePath "$remoteICMDir\lastPS.ps1" -Encoding UTF8 -ErrorAction Stop
    }
    catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to save last list/commands: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }

    if ($chkSaveCsv.Checked) {
        try {
            $remoteICMDir = "$env:USERPROFILE\Desktop\RemoteICM"
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $script:CsvPath = "$remoteICMDir\RemoteCommandResults_$timestamp.csv"
            "ComputerName,Status,Timestamp,Output" | Out-File -FilePath $script:CsvPath -Encoding UTF8 -ErrorAction Stop
        }
        catch {
            [System.Windows.Forms.MessageBox]::Show("Failed to initialize CSV: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
            $btnRun.Enabled = $true
            $btnCancel.Enabled = $false
            $lblStatus.Text = ""
            return
        }
    }

    Show-ResultsWindow
    $progressBar.Maximum = $computers.Count
    $totalComputers = $computers.Count
    $updateInterval = if ($totalComputers -gt 0) { [Math]::Ceiling($totalComputers * 0.25) } else { 1 }
    $processedCount = 0

    $scriptBlock = [ScriptBlock]::Create($commandText)
    $script:Job = Invoke-Command -ComputerName $computers -ScriptBlock $scriptBlock -ThrottleLimit $numThrottle.Value -AsJob -SessionOption (New-PSSessionOption -OperationTimeout 30000)

    $script:Timer = New-Object System.Windows.Forms.Timer
    $script:Timer.Interval = 1000
    $script:Timer.Add_Tick({
        if ($script:Job -and $script:Job.State -eq "Running" -and -not $script:IsCancelled) {
            $completedJobs = $script:Job.ChildJobs | Where-Object { $_.State -ne "Running" }
            $processedCount = $completedJobs.Count
            $progressBar.Value = $processedCount
            $lblStatus.Text = "Processing... ($processedCount of $totalComputers)"
            
            $partialResults = $script:Job | Receive-Job -Keep -ErrorAction SilentlyContinue
            foreach ($item in $partialResults) {
                if (-not ($script:ResultsList | Where-Object { $_.ComputerName -eq $item.PSComputerName })) {
                    $result = [PSCustomObject]@{
                        ComputerName = $item.PSComputerName
                        Output       = if ($item) { $item | Out-String } else { "No output" }
                        Status       = "Success"
                        Timestamp    = Get-Date
                    }
                    $script:ResultsList.Add($result) | Out-Null
                    if ($chkSaveCsv.Checked -and $script:CsvPath) {
                        $result | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 | Out-File -FilePath $script:CsvPath -Append -Encoding UTF8 -ErrorAction SilentlyContinue
                    }
                }
            }

            $failedJobs = $script:Job.ChildJobs | Where-Object { $_.State -eq "Failed" }
            foreach ($job in $failedJobs) {
                $computer = $job.Location
                if (-not ($script:ResultsList | Where-Object { $_.ComputerName -eq $computer })) {
                    $errorMessage = $job.ChildJobs[0].Error | Out-String
                    $result = [PSCustomObject]@{
                        ComputerName = $computer
                        Output       = "[Error]: $errorMessage"
                        Status       = if ($errorMessage -match "not online") { "Offline" } else { "Error" }
                        Timestamp    = Get-Date
                    }
                    $script:ResultsList.Add($result) | Out-Null
                    if ($chkSaveCsv.Checked -and $script:CsvPath) {
                        $result | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 | Out-File -FilePath $script:CsvPath -Append -Encoding UTF8 -ErrorAction SilentlyContinue
                    }
                }
            }

            if ($totalComputers -gt 0 -and ($processedCount % $updateInterval -eq 0 -or $processedCount -eq $totalComputers)) {
                Update-DataGridView -results $script:ResultsList
            }
        }
        elseif ($script:Job -and ($script:Job.State -ne "Running" -or $script:IsCancelled)) {
            if ($script:Timer) {
                $script:Timer.Stop()
                $script:Timer.Dispose()
                $script:Timer = $null
            }

            if ($script:IsCancelled) {
                if ($script:Job) {
                    $script:Job | Stop-Job -ErrorAction SilentlyContinue
                    $script:Job | Remove-Job -Force -ErrorAction SilentlyContinue
                    $script:Job = $null
                }
                $lblStatus.Text = "Execution cancelled"
            }
            else {
                if ($script:Job) {
                    $finalResults = $script:Job | Receive-Job -ErrorAction SilentlyContinue -ErrorVariable jobErrors
                    $script:Job | Remove-Job -Force -ErrorAction SilentlyContinue
                    $script:Job = $null
                    
                    foreach ($item in $finalResults) {
                        if (-not ($script:ResultsList | Where-Object { $_.ComputerName -eq $item.PSComputerName })) {
                            $result = [PSCustomObject]@{
                                ComputerName = $item.PSComputerName
                                Output       = if ($item) { $item | Out-String } else { "No output" }
                                Status       = "Success"
                                Timestamp    = Get-Date
                            }
                            $script:ResultsList.Add($result) | Out-Null
                            if ($chkSaveCsv.Checked -and $script:CsvPath) {
                                $result | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 | Out-File -FilePath $script:CsvPath -Append -Encoding UTF8 -ErrorAction SilentlyContinue
                            }
                        }
                    }

                    foreach ($error in $jobErrors) {
                        $computer = $error.TargetObject
                        if (-not ($script:ResultsList | Where-Object { $_.ComputerName -eq $computer })) {
                            $errorMessage = $error.Exception.Message
                            $result = [PSCustomObject]@{
                                ComputerName = $computer
                                Output       = "[Error]: $errorMessage"
                                Status       = if ($errorMessage -match "not online") { "Offline" } else { "Error" }
                                Timestamp    = Get-Date
                            }
                            $script:ResultsList.Add($result) | Out-Null
                            if ($chkSaveCsv.Checked -and $script:CsvPath) {
                                $result | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 | Out-File -FilePath $script:CsvPath -Append -Encoding UTF8 -ErrorAction SilentlyContinue
                            }
                        }
                    }

                    foreach ($computer in $computers) {
                        if (-not ($script:ResultsList | Where-Object { $_.ComputerName -eq $computer })) {
                            $result = [PSCustomObject]@{
                                ComputerName = $computer
                                Output       = "[No Response]"
                                Status       = "No Response"
                                Timestamp    = Get-Date
                            }
                            $script:ResultsList.Add($result) | Out-Null
                            if ($chkSaveCsv.Checked -and $script:CsvPath) {
                                $result | ConvertTo-Csv -NoTypeInformation | Select-Object -Skip 1 | Out-File -FilePath $script:CsvPath -Append -Encoding UTF8 -ErrorAction SilentlyContinue
                            }
                        }
                    }
                }

                Update-DataGridView -results $script:ResultsList
                $progressBar.Value = $totalComputers
                $lblStatus.Text = if ($chkSaveCsv.Checked) { "Completed - Results saved to: $script:CsvPath" } else { "Completed" }
            }

            $btnRun.Enabled = $true
            $btnCancel.Enabled = $false
            Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
        }
    })
    if ($script:Timer) {
        $script:Timer.Start()
    }
})

$btnCancel.Add_Click({
    $script:IsCancelled = $true
    $lblStatus.Text = "Cancelling execution..."
})

$form.Add_FormClosing({
    $script:IsCancelled = $true
    if ($script:Job -and $script:Job.State -eq "Running") {
        $script:Job | Stop-Job -ErrorAction SilentlyContinue
        $script:Job | Remove-Job -Force -ErrorAction SilentlyContinue
        $script:Job = $null
    }
    if ($script:Timer) {
        $script:Timer.Stop()
        $script:Timer.Dispose()
        $script:Timer = $null
    }
    Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
})

$remoteICMDir = "$env:USERPROFILE\Desktop\RemoteICM"
if (-not (Test-Path $remoteICMDir)) { New-Item -Path $remoteICMDir -ItemType Directory -Force | Out-Null }
if (Test-Path $script:LogPath) { Clear-Content -Path $script:LogPath }
Add-Content -Path $script:LogPath -Value "$(Get-Date): Script initialized" -ErrorAction SilentlyContinue

$form.ShowDialog()
